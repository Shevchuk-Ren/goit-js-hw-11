{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AACA,MAAMA,EAAQC,GAEH,IAAIC,QAASC,IACZF,GACAG,WAAW,KACPD,EAAQF,IACTA,KAOTI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAKtBC,EAAkB,CAACC,EAAUC,IAGxBb,QAAQC,QACXW,EAASE,IAAIC,GAEFA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,IAchFJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAKlDK,EAAmBC,IACf1B,MAAAA,EAAQmB,EAA0B,IAAK,KAEtC,OAAA,IAAIjB,QAAQ,CAACC,EAASwB,KAExBvB,WAAW,KACOkB,KAAKE,SAAW,IAI/BrB,EAAQ,CAAEyB,GAAIF,EAAYE,GAAItB,KAAMN,IAGpC2B,EAAOD,EAAYE,KAExB5B,MAKD6B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MAEtBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG5CwB,EAAWF,IACbrB,QAAQwB,qCAAqCH,+BAUjDH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"03-promisify.f2d744d5.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\r\nconst delay = ms => {\r\n    // Change this function\r\n    return new Promise((resolve) => {\r\n        if (ms) {\r\n            setTimeout(() => {\r\n                resolve(ms)\r\n            }, ms);\r\n            \r\n        }\r\n    });\r\n \r\n};\r\n\r\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\r\n// console.log(delay(2000))\r\n// Tests\r\ndelay(2000).then(logger); // Fulfilled after 2000ms\r\ndelay(1000).then(logger); // Fulfilled after 1000ms\r\ndelay(1500).then(logger); // Fulfilled after 1500ms\r\n\r\n// ======================= Subtask 2 =======================\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: false },\r\n];\r\n\r\n\r\n\r\nconst toggleUserState = (allUsers, username) => {\r\n    // console.log(username);\r\n   \r\n    return Promise.resolve(\r\n        allUsers.map(user => {\r\n                \r\n            return user.name === username ? { ...user, active: !user.active } : user;\r\n                \r\n        })\r\n    );\r\n    }\r\n    \r\n\r\n\r\n\r\n// Currently the function works like this\r\n// toggleUserState(users, 'Mango', console.table);\r\n// toggleUserState(users, 'Ajax', console.table);\r\n\r\n// The function should work like this\r\ntoggleUserState(users, 'Mango').then(console.table);\r\ntoggleUserState(users, 'Ajax').then(console.table);\r\n\r\n// // ======================= Subtask 3 =======================\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    // console.log(delay)\r\n    return new Promise((resolve, reject) => {\r\n\r\n         setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n           \r\n            resolve({ id: transaction.id, time: delay })\r\n        } \r\n          \r\n            reject(transaction.id)\r\n        \r\n    }, delay)\r\n     })\r\n   \r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    // console.log(id)\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n// Currently the function works like this\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\n// The function should work like this\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}