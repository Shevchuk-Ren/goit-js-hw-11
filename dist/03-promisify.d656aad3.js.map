{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"AAAA;AACA,MAAMA,KAAK,GAAGC,EAAE,IAAI;AAChB;AACA,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,QAAIF,EAAJ,EAAQ;AACJG,MAAAA,UAAU,CAAC,MAAM;AACbD,QAAAA,OAAO,CAACF,EAAD,CAAP;AACH,OAFS,EAEPA,EAFO,CAAV;AAIH;AACJ,GAPM,CAAP;AASH,CAXD;;AAaA,MAAMI,MAAM,GAAGC,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAa,mBAAkBF,IAAK,IAApC,CAAvB,EACA;AACA;;;AACAN,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;AAE1B;;AACA,MAAMK,KAAK,GAAG,CACV;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,MAAM,EAAE;AAAzB,CADU,EAEV;AAAED,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,MAAM,EAAE;AAAxB,CAFU,EAGV;AAAED,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,MAAM,EAAE;AAAxB,CAHU,CAAd;;AAQA,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC5C;AAEA,SAAOb,OAAO,CAACC,OAAR,CACHW,QAAQ,CAACE,GAAT,CAAaC,IAAI,IAAI;AAEjB,WAAOA,IAAI,CAACN,IAAL,KAAcI,QAAd,GAAyB,EAAE,GAAGE,IAAL;AAAWL,MAAAA,MAAM,EAAE,CAACK,IAAI,CAACL;AAAzB,KAAzB,GAA6DK,IAApE;AAEH,GAJD,CADG,CAAP;AAOC,CAVL,EAeA;AACA;AACA;AAEA;;;AACAJ,eAAe,CAACH,KAAD,EAAQ,OAAR,CAAf,CAAgCD,IAAhC,CAAqCF,OAAO,CAACW,KAA7C;AACAL,eAAe,CAACH,KAAD,EAAQ,MAAR,CAAf,CAA+BD,IAA/B,CAAoCF,OAAO,CAACW,KAA5C,GAEA;;AACA,MAAMC,yBAAyB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH,CAFD;;AAMA,MAAMK,eAAe,GAAIC,WAAD,IAAiB;AACrC,QAAM1B,KAAK,GAAGmB,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC,CADqC,CAErC;;AACA,SAAO,IAAIjB,OAAJ,CAAY,CAACC,OAAD,EAAUwB,MAAV,KAAqB;AAEnCvB,IAAAA,UAAU,CAAC,MAAM;AAClB,YAAMwB,UAAU,GAAGN,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEA,UAAII,UAAJ,EAAgB;AAEZzB,QAAAA,OAAO,CAAC;AAAE0B,UAAAA,EAAE,EAAEH,WAAW,CAACG,EAAlB;AAAsBvB,UAAAA,IAAI,EAAEN;AAA5B,SAAD,CAAP;AACH;;AAEG2B,MAAAA,MAAM,CAACD,WAAW,CAACG,EAAb,CAAN;AAEP,KAVc,EAUZ7B,KAVY,CAAV;AAWH,GAbK,CAAP;AAeH,CAlBD;;AAoBA,MAAM8B,UAAU,GAAG,CAAC;AAAED,EAAAA,EAAF;AAAMvB,EAAAA;AAAN,CAAD,KAAkB;AACjC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,eAAcqB,EAAG,iBAAgBvB,IAAK,IAAnD;AACH,CAHD;;AAKA,MAAMyB,QAAQ,GAAGF,EAAE,IAAI;AACnBtB,EAAAA,OAAO,CAACyB,IAAR,CAAc,gCAA+BH,EAAG,2BAAhD;AACH,CAFD,EAIA;AACA;AACA;AACA;AACA;AAEA;;;AACAJ,eAAe,CAAC;AAAEI,EAAAA,EAAE,EAAE,EAAN;AAAUI,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCxB,IAAzC,CAA8CqB,UAA9C,EAA0DI,KAA1D,CAAgEH,QAAhE;AACAN,eAAe,CAAC;AAAEI,EAAAA,EAAE,EAAE,EAAN;AAAUI,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCxB,IAAzC,CAA8CqB,UAA9C,EAA0DI,KAA1D,CAAgEH,QAAhE;AACAN,eAAe,CAAC;AAAEI,EAAAA,EAAE,EAAE,EAAN;AAAUI,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAwCxB,IAAxC,CAA6CqB,UAA7C,EAAyDI,KAAzD,CAA+DH,QAA/D;AACAN,eAAe,CAAC;AAAEI,EAAAA,EAAE,EAAE,EAAN;AAAUI,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CAAyCxB,IAAzC,CAA8CqB,UAA9C,EAA0DI,KAA1D,CAAgEH,QAAhE","file":"03-promisify.d656aad3.js","sourceRoot":"..\\src","sourcesContent":["// ======================= Subtask 1 =======================\r\nconst delay = ms => {\r\n    // Change this function\r\n    return new Promise((resolve) => {\r\n        if (ms) {\r\n            setTimeout(() => {\r\n                resolve(ms)\r\n            }, ms);\r\n            \r\n        }\r\n    });\r\n \r\n};\r\n\r\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\r\n// console.log(delay(2000))\r\n// Tests\r\ndelay(2000).then(logger); // Fulfilled after 2000ms\r\ndelay(1000).then(logger); // Fulfilled after 1000ms\r\ndelay(1500).then(logger); // Fulfilled after 1500ms\r\n\r\n// ======================= Subtask 2 =======================\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: false },\r\n];\r\n\r\n\r\n\r\nconst toggleUserState = (allUsers, username) => {\r\n    // console.log(username);\r\n   \r\n    return Promise.resolve(\r\n        allUsers.map(user => {\r\n                \r\n            return user.name === username ? { ...user, active: !user.active } : user;\r\n                \r\n        })\r\n    );\r\n    }\r\n    \r\n\r\n\r\n\r\n// Currently the function works like this\r\n// toggleUserState(users, 'Mango', console.table);\r\n// toggleUserState(users, 'Ajax', console.table);\r\n\r\n// The function should work like this\r\ntoggleUserState(users, 'Mango').then(console.table);\r\ntoggleUserState(users, 'Ajax').then(console.table);\r\n\r\n// // ======================= Subtask 3 =======================\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    // console.log(delay)\r\n    return new Promise((resolve, reject) => {\r\n\r\n         setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n           \r\n            resolve({ id: transaction.id, time: delay })\r\n        } \r\n          \r\n            reject(transaction.id)\r\n        \r\n    }, delay)\r\n     })\r\n   \r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    // console.log(id)\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n// Currently the function works like this\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\n// The function should work like this\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}