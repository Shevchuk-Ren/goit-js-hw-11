{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updateUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"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","file":"03-promisify.d656aad3.js","sourceRoot":"..\\src","sourcesContent":["// ======================= Subtask 1 =======================\r\nconst delay = ms => {\r\n    // Change this function\r\n    return new Promise((resolve) => {\r\n        if (ms) {\r\n            setTimeout(() => {\r\n                resolve(ms)\r\n            }, ms);\r\n            \r\n        }\r\n    });\r\n    \r\n};\r\n\r\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\r\n// console.log(delay(2000))\r\n// Tests\r\ndelay(2000).then(logger); // Fulfilled after 2000ms\r\ndelay(1000).then(logger); // Fulfilled after 1000ms\r\ndelay(1500).then(logger); // Fulfilled after 1500ms\r\n\r\n// ======================= Subtask 2 =======================\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: false },\r\n];\r\n\r\n\r\n\r\nconst toggleUserState = (allUsers, username) => {\r\n    // console.log(username);\r\n   return new Promise((resolve) => {\r\n\r\n            const updateUsers =  allUsers.map(user => {\r\n                \r\n                if(user.name === username) {\r\n                   user.active = !user.active;\r\n                   return user;\r\n                }  else  {\r\n                    return user; \r\n                }})\r\nconsole.log(updateUsers)\r\n        if(updateUsers) { \r\n            resolve(updateUsers) \r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Currently the function works like this\r\n// toggleUserState(users, 'Mango', console.table);\r\n// toggleUserState(users, 'Ajax', console.table);\r\n\r\n// The function should work like this\r\n// toggleUserState(users, 'Mango').then(console.table);\r\ntoggleUserState(users, 'Ajax').then(console.table);\r\n\r\n// // ======================= Subtask 3 =======================\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    console.log(delay)\r\n    return new Promise((resolve, reject) => {\r\n\r\n         setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n           \r\n            resolve({ id: transaction.id, time: delay })\r\n        } \r\n          \r\n            reject(transaction.id)\r\n        \r\n    }, delay)\r\n     })\r\n   \r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    console.log(id)\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n// Currently the function works like this\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\n// The function should work like this\r\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}