{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","callback","map","user","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","setTimeout","id","logSuccess","logError","warn"],"mappings":";AACA,MAAMA,EAAQC,MAIRC,EAASC,GAAQC,QAAQC,uBAAuBF,aAGtDH,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,SACjBF,GAAYM,KAAKJ,GAGjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,EAAUC,KAKzCA,EAJqBF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,KAe/DC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkB,CAACC,EAAaC,EAAWC,KACvCzB,MAAAA,EAAQgB,EAA0B,IAAK,KAE7CU,WAAW,KACYP,KAAKE,SAAW,GAG/BG,EAAU,CAAEG,GAAIJ,EAAYI,GAAIxB,KAAMH,IAEtCyB,EAAQF,EAAYI,KAEzB3B,IAGD4B,EAAa,EAAGD,GAAAA,EAAIxB,KAAAA,MACtBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG5C0B,EAAWF,IACbvB,QAAQ0B,qCAAqCH","file":"03-promisify.17b720b9.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\r\nconst delay = ms => {\r\n    // Change this function\r\n};\r\n\r\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\r\n\r\n// Tests\r\ndelay(2000).then(logger); // Fulfilled after 2000ms\r\ndelay(1000).then(logger); // Fulfilled after 1000ms\r\ndelay(1500).then(logger); // Fulfilled after 1500ms\r\n\r\n// ======================= Subtask 2 =======================\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, username, callback) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === username ? { ...user, active: !user.active } : user\r\n    );\r\n\r\n    callback(updatedUsers);\r\n};\r\n\r\n// Currently the function works like this\r\n// toggleUserState(users, 'Mango', console.table);\r\n// toggleUserState(users, 'Ajax', console.table);\r\n\r\n// The function should work like this\r\n// toggleUserState(users, 'Mango').then(console.table);\r\n// toggleUserState(users, 'Ajax').then(console.table);\r\n\r\n// ======================= Subtask 3 =======================\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction, onSuccess, onError) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n            onSuccess({ id: transaction.id, time: delay });\r\n        } else {\r\n            onError(transaction.id);\r\n        }\r\n    }, delay);\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n// Currently the function works like this\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\n// The function should work like this\r\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}