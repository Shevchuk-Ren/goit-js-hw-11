{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updateUsers","map","user","table"],"mappings":";AACA,MAAMA,EAAQC,GAEH,IAAIC,QAASC,IACZF,GACAG,WAAW,KACPD,EAAQF,IACTA,KAOTI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAWtBC,EAAkB,CAACC,EAAUC,IAEzB,IAAIb,QAASC,IAELa,MAAAA,EAAeF,EAASG,IAAIC,GAE3BA,EAAKP,OAASI,GACdG,EAAKN,QAAUM,EAAKN,OACbM,GAECA,GAE3BX,QAAQC,IAAIQ,GACDA,GACCb,EAAQa,KAYpBH,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY","file":"03-promisify.93d1854d.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\r\nconst delay = ms => {\r\n    // Change this function\r\n    return new Promise((resolve) => {\r\n        if (ms) {\r\n            setTimeout(() => {\r\n                resolve(ms)\r\n            }, ms);\r\n            \r\n        }\r\n    });\r\n    \r\n};\r\n\r\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\r\n// console.log(delay(2000))\r\n// Tests\r\ndelay(2000).then(logger); // Fulfilled after 2000ms\r\ndelay(1000).then(logger); // Fulfilled after 1000ms\r\ndelay(1500).then(logger); // Fulfilled after 1500ms\r\n\r\n// ======================= Subtask 2 =======================\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, username, callback) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//         user.name === username ? { ...user, active: !user.active } : user\r\n//     );\r\n\r\n//     callback(updatedUsers);\r\n// };\r\n\r\nconst toggleUserState = (allUsers, username) => {\r\n    // console.log(username);\r\n   return new Promise((resolve) => {\r\n\r\n            const updateUsers =  allUsers.map(user => {\r\n                \r\n                if(user.name === username) {\r\n                   user.active = !user.active;\r\n                   return user;\r\n                }  else  {\r\n                    return user; \r\n                }})\r\nconsole.log(updateUsers)\r\n        if(updateUsers) { \r\n            resolve(updateUsers) \r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Currently the function works like this\r\n// toggleUserState(users, 'Mango', console.table);\r\n// toggleUserState(users, 'Ajax', console.table);\r\n\r\n// The function should work like this\r\n// toggleUserState(users, 'Mango').then(console.table);\r\ntoggleUserState(users, 'Ajax').then(console.table);\r\n\r\n// // ======================= Subtask 3 =======================\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//     return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//     const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//     setTimeout(() => {\r\n//         const canProcess = Math.random() > 0.3;\r\n\r\n//         if (canProcess) {\r\n//             onSuccess({ id: transaction.id, time: delay });\r\n//         } else {\r\n//             onError(transaction.id);\r\n//         }\r\n//     }, delay);\r\n// };\r\n\r\n// const logSuccess = ({ id, time }) => {\r\n//     console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//     console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// // Currently the function works like this\r\n// // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\n// // The function should work like this\r\n// // makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n// // makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n// // makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n// // makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}